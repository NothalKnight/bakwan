#
    system.singkong
    System
    part of Bakwan: simple accounting software
    
    Authors:
    Noprianto (nop@noprianto.com)
    Budiman (Budyzhang778@gmail.com)
;

load_module("db_util")

var conf_name = "bakwan.properties"
var conf_path = userhome() + separator() + conf_name

var db_types = [
    "User",
    "Embedded",
    "Network",
    "PostgreSQL"
]
var db_types_ = join(",", db_types)
var db_types_derby = [
    "User",
    "Embedded",
    "Network"
]
var db_types_pg = "PostgreSQL"

var db_system_table = "bakwan"
var db_system_val = {
    "param": "version",
    "value_text": "1"
}

var db_system_user_group = "user_group"
var db_system_user_account = "user_account"
var db_system_default_user = "admin"
var db_system_default_password = "admin"


var read_config = fn(ctx) {
    return properties_read(conf_path)
}

var connect_db = fn(ctx, dt, dh, du, dp, dn) {
    var n = ctx["name"]
    if (n == null) {
        return n
    }

    var c = "//" + dh + "/" + dn
    if (dt == "User") {
        return db_connect_embed_user(n)
    } 
    if (dt == "Embedded") {
        return db_connect_embed(dn)
    }
    if (dt == "Network") {
        return db_connect("derby", c, du, dp)
    }
    if (dt == "PostgreSQL") {
        return db_connect("postgresql", c, du, dp)
    }
    return null
}

var get_db_info = fn(ctx, p) {
    var conf = read_config(ctx)
    var ret = [
        _("label_db_type") + ": " + conf["db_type"],
        _("label_db_host") + ": " + conf["db_host"],
        _("label_db_user") + ": " + conf["db_user"],
        _("label_db_name") + ": " + conf["db_name"]
    ]
    if (p == true) {
        ret + (_("label_db_password") + ": " + conf["db_password"])
    }
    return ret
}

var get_db = fn(ctx) {
    var conf = read_config(ctx)
    var db_host = conf["db_host"]
    var db_user = conf["db_user"]
    var db_password = conf["db_password"]
    var db_name = conf["db_name"]
    var db_type = conf["db_type"]
    return connect_db(ctx, 
        db_type, db_host, db_user, db_password,
        db_name)
}

var is_new = fn(ctx) {
    var db = ctx["db"]
    if (db == null) {
        return null
    }

    var r = db_select_all(db, db_system_table)
    return r == null
}

var system_init_db = fn(ctx) {
    var db = ctx["db"]
    if (db == null) {
        return null
    }
    var dt = ctx["db_type"]

    var system_col = [
        ["bakwan_id", "id."],
        ["param", "varchar"],
        ["value_text", "text."]
    ]
    var user_group_col = [
        ["user_group_id", "id."],
        ["name", "varchar"]
    ]
    var user_group_val = {
        "name": "default"
    }
    var user_account_col = [
        ["user_account_id", "id."],
        ["user_account_group_id", "integer"],
        ["name", "varchar"],
        ["salt", "varchar"],
        ["password", "varchar"]
    ]
    var user_account_salt = random_string(16, 16)
    var user_account_val = {
        "name": "default",
        "user_account_group_id": null,
        "name": db_system_default_user,
        "salt": user_account_salt,
        "password": md5(
            db_system_default_password + user_account_salt
        )
    }

    if (in(db_types_derby, dt)) {
        var r = db_create_table_derby(db, db_system_table, system_col)
        var r = db_insert(db, db_system_table, db_system_val)
        var r = db_create_table_derby(db, db_system_user_group, 
            user_group_col)
        var r = db_insert(db, db_system_user_group, user_group_val)
        var gid = db_last_derby(db)
        if (gid == null) {
            return null
        }
        var r = db_create_table_derby(db, db_system_user_account, 
            user_account_col)
        set(user_account_val, "user_account_group_id", gid)
        var r = db_insert(db, db_system_user_account, user_account_val)

    }
    if (dt == db_types_pg) {
        var r = db_create_table_postgresql(db, db_system_table, system_col)
        var r = db_insert(db, db_system_table, db_system_val)
        var r = db_create_table_postgresql(db, 
            db_system_user_group, user_group_col)
        var r = db_insert(db, db_system_user_group, user_group_val)
        var gid = db_last_postgresql(db)
        if (gid == null) {
            return null
        }
        var r = db_create_table_postgresql(db, db_system_user_account, 
            user_account_col)
        set(user_account_val, "user_account_group_id", gid)
        var r = db_insert(db, db_system_user_account, user_account_val)
    }
    return true 
}

var system_db_get_version = fn(ctx) {
    var db = ctx["db"]
    if (db == null) {
        return null
    }

    var r = db_query_single(db, 
        "select value_text from bakwan where param=?",
        ["version"]
    )
    if (r == null) {
        return null
    }

    var r = r[0]
    if (len(r) != 1) {
        return null
    }
    
    var v = number(r[0][0])
    if (v < 1) {
        return null
    }

    return v
}

var system_db_set_version = fn(ctx, v) {
    var db = ctx["db"]
    if (db == null) {
        return null
    }

    var r = db_query_single(db, 
        "update bakwan
        set value_text=?
        where param=?",
        [string(v), "version"]
    )
    if (r == null) {
        return null
    }
    return true
}

var system_upgrade_db = fn(ctx) {
    var db = ctx["db"]
    if (db == null) {
        return null
    }
    var dt = ctx["db_type"]

    var latest = 5
    var res = []
    var r = repeat {
        var v = system_db_get_version(ctx)
        if (v == latest) {
            return false
        }
        if (v == null) {
            return null
        }
        if (v == 1) {
            var sql_v1 = "alter table user_account 
                add constraint fk_user_account_group_id 
                foreign key (user_account_group_id)
                references user_group(user_group_id)
                "
            var r = db_query_simple(db, sql_v1)
            if (r == null) {
                return null
            }
        }

        if (v == 2) {
            var account_coa_col = [
                ["account_coa_id", "id."],
                ["account_type", "integer"],
                ["code", "varchar"],
                ["description", "varchar"]
            ]

            if (in(db_types_derby, dt)) {
                var r = db_create_table_derby(db, "account_coa", account_coa_col)
                if (r[0] == null) {
                    return null                
                }
            }
            if (dt == db_types_pg) {
                var r = db_create_table_postgresql(db, "account_coa", account_coa_col)
                if (r[0] == null) {
                    return null                
                }
            }
        }

        if (v == 3) {
            var account_transaction_col = [
                ["account_transaction_id", "id."],
                ["transaction_type", "varchar."],
                ["description", "varchar"],
                ["event", "timestamp"]
            ]

            var account_journal_col = [
                ["account_journal_id", "id."],
                ["account_journal_transaction_id", "integer"],
                ["account_journal_coa_id", "integer"],
                ["amount", "decimal."],
                ["debit", "decimal."],
                ["credit", "decimal."],
                ["reference", "varchar"]
            ]

            if (in(db_types_derby, dt)) {
                var r = db_create_table_derby(db, "account_transaction", account_transaction_col)
                if (r[0] == null) {
                    return null                
                }
                var r = db_create_table_derby(db, "account_journal", account_journal_col)
                if (r[0] == null) {
                    return null                
                }
            }
            if (dt == db_types_pg) {
                var r = db_create_table_postgresql(db, "account_transaction", account_transaction_col)
                if (r[0] == null) {
                    return null                
                }
                var r = db_create_table_postgresql(db, "account_journal", account_journal_col)
                if (r[0] == null) {
                    return null                
                }
            }

            var sql_v3_1 = "alter table account_journal 
                add constraint fk_account_journal_transaction_id 
                foreign key (account_journal_transaction_id)
                references account_transaction(account_transaction_id)
                "
            var r = db_query_simple(db, sql_v3_1)
            if (r == null) {
                return null
            }
            var sql_v3_2 = "alter table account_journal 
                add constraint fk_account_journal_coa_id 
                foreign key (account_journal_coa_id)
                references account_coa(account_coa_id)
                "
            var r = db_query_simple(db, sql_v3_2)
            if (r == null) {
                return null
            }
        }

        if (v == 4) {
            var a = db_select_all(db, "account_coa")
            if (a == null) {
                return null
            }
            if (empty(a[0])) {
                each(accounts_template, fn(e, i) {
                    var d = {
                        "account_type": ac_types_code[e[0]],
                        "code": e[1],
                        "description": e[2]
                    }
                    db_insert(db, "account_coa", d)
                })
            }
            var a = db_select_all(db, "account_coa")
            if (a == null) {
                return null
            }
            if (empty(a[0])) {
                return null
            }
        }

        var cv = v + 1
        var rv = system_db_set_version(ctx, cv)
        if (rv == null) {
            return null
        }
        if (rv == true) {
            res + rv
        }
        if (cv == latest) { 
            return true
        }
    }

    if (r == null) {
        return null
    }
    if (is_array_of(res, "BOOLEAN")) {
        return true
    }
    return false
}

var system_auth = fn(ctx, u, p) {
    var db = ctx["db"]
    var r = db_query_single(db, 
        "select salt from user_account where name=?", 
    [u])
    if (r != null) {
        var r = r[0]
        if (len(r) == 1) {
            var s = r[0][0]
            var h = md5(p + s)
            var rr = db_query_single(db, 
                "select user_account_id, 
                    user_account_group_id,
                    name
                from user_account
                    where
                name=? and password=?",
                [u, h]
            )
            if (rr != null) {
                var rr = rr[0]
                if (len(rr) == 1) {
                    return rr[0]
                }
            }
        }
    }
    return []
}
